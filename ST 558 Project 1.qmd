---
title: "ST 558 Project 1"
format: html
author: "Taylor Cesarski and Trevor Lynch"
editor_options: 
  chunk_output_type: console
---
```{r, echo = FALSE, message = FALSE}
library(tidyverse)
```
## Steps 1 & 2 Function 
This function is taking in a dataset and has a default arugment of "Enrollment". It then creates a new data frame called new_df and selects only the columns called Area_name, STCOU, and any column ending with D. It is renaming the Area_name column as area_name and pivoting longer on columns 3 through 12. It is taking the names to "time" and the values_to the values column as given by the argument. It then returns the new_df.
```{r}
education_data <- function(data, values = "Enrollment"){
  new_df <- data |>
    select(Area_name, STCOU, ends_with("D")) |>
    rename(area_name = Area_name) |>
    pivot_longer(cols = 3:12,
               names_to = "time",
               values_to = values)
  
  return(new_df)
}

```

## Step 3 Function 
This is a function called year_function that takes in new_df (the output of the previous function). It initializes a numeric vector of length of the number of rows of the input, new_df. Then, using a for loop it loops through all iterations of the time column of the new_df and takes the 8th and 9th strings. Then it takes that value and converts it to a numeric variable. Then, if that number is less than 20, it adds 2000 so for example if the number was 03 it would change to 2003. Otherwise, add 1900 to get something like 1997. Since there are no data values in the 1920s or earlier, this pattern will hold. It is storing each of these values in the initial vector created. 
```{r}
year_function <- function(new_df){
  Year_Date <- numeric(nrow(new_df))
  
  for(i in seq_along(new_df$time)){
    time_year <- substr(new_df$time[i],8,9)
    year_numeric <- as.numeric(time_year)
  
year_numeric <- ifelse(year_numeric < 20, 
                       year_numeric + 2000, 
                       year_numeric + 1900) 

Year_Date[i] <- year_numeric
  }
#This section initializes a new character vector called measurement.
#It then loops through the time column of new_df and pulls strings 1-7 & stores them in measurement vector. 
  measurement <- character(nrow(new_df))
for(i in seq_along(new_df$time)){
  measurement_type <- substr(new_df$time[i], 1, 7)

  measurement[i] <- measurement_type
}
#Then it takes the new_df and adds columns for Year_Date and Measurement. 
#It gets rid of the time column since that is no longer needed.
new_df |>
  mutate(Year_Date = Year_Date,
         Measurement = measurement) |>
  select(-time)
  
}
```

## Step 5 Function
This creates a function called add_state that first creates a character vector called state_name that is the length of the number of rows in the inputted dataset. Then, it loops through the area_name column and creates a new vector called state_info that takes the area_name column and looks at the second to last string and the last string there. Then it stores each of these in the ith element of the state_name character vector initially created. It returns the initial dataset with an added column called State.
```{r}
add_state<- function(input){
  state_name <- character(nrow(input))
  for(i in seq_along(input$area_name)){
    state_info <- substr(input$area_name[i], 
                       nchar(input$area_name[i]) -1, 
                       nchar(input$area_name[i]))
state_name[i] <- state_info
  }
  return(input |>
    mutate(State = state_name))
}
```

## Step 6 Function
This function is called add_division. It first initalizes a vector called division that is a character vector of the length of the number of rows in the inputted dataset. It then loops through each element of the area_name column and assigns the element of the division vector based on if it matches a state name. If it doesn't, it moves onto the next one. If it doesn't match any state name, it returns error such as for the United States. Then it takes the initial dataset and adds a column corresponding to division.
```{r}
add_division <- function(data_input){
  division <- character(nrow(data_input))
  for(i in seq_along(data_input$area_name)){
    division[i] <-
  ifelse(data_input$area_name[i] %in% c("CONNECTICUT", "MAINE", "MASSACHUSETTS", "NEW HAMPSHIRE", "RHODE ISLAND", "VERMONT"), "New England", 
         ifelse(data_input$area_name[i] %in% c("NEW JERSEY", "NEW YORK", "PENNSYLVANIA"), "Middle Atlantic",
                ifelse(data_input$area_name[i] %in% c("ILLINOIS", "INDIANA", "MICHIGAN", "OHIO", "WISCONSIN"), "East North Central",
                       ifelse(data_input$area_name[i] %in% c("IOWA", "KANSAS", "MINNESOTA", "MISSOURI", "NEBRASKA", "NORTH DAKOTA", "SOUTH DAKOTA"), "West North Central",
                              ifelse(data_input$area_name[i] %in% c("DELAWARE", "FLORIDA", "GEORGIA", "MARYLAND", "NORTH CAROLINA", "SOUTH CAROLINA", "VIRGINIA", "DISTRICT OF COLUMBIA", "District of Columbia", "WEST VIRGINIA"), "South Atlantic",
                                     ifelse(data_input$area_name[i] %in% c("ALABAMA", "KENTUCKY", "MISSISSIPPI", "TENNESSEE"), "East South Central",
                                            ifelse(data_input$area_name[i] %in% c("ARKANSAS", "LOUSIANA", "OKLAHOMA", "TEXAS"), "West South Central",
                                                   ifelse(data_input$area_name[i] %in% c("ARIZONA", "COLORADO", "IDAHO", "MONTANA", "NEVADA", "NEW MEXICO", "UTAH", "WYOMING"), "Mountain",
                                                          ifelse(data_input$area_name[i] %in% c("ALASKA", "CALIFORNIA", "HAWAII", "OREGON", "WASHINGTON"), "Pacific",
           "Error")))))))))
  }
return(data_input |>
  mutate(Division = division))
  
}
```
## Step 4 Function with calling Steps 5 & 6 Function
This function first creates a vector called county_indices that looks for the pattern such as Wake, NC where the first part corresponds to the county and the last two to the state. Then it filters to only look at the row numbers in the county indices and assigns that to a tibble called county_data. Finally it assigns a class called county. Then it applies the add_state function above to the county tibble to create a new tibble called add_state_info.

```{r}
new_tibbles <- function(input_data){
  county_indices <- grep(pattern = ", \\w\\w", input_data$area_name)
  county_data <- input_data |>
  filter(row_number() %in% county_indices)
 class(county_data) <- c("county", class(county_data))
 
 add_state_info <-add_state(county_data)
 
#For any row numbers not in county indices, it assigns them to a tibble called non_county_data  & and creates a class called state. 
 #Then it applies the add_division function above to add the division to this tibble.
 non_county_data <- input_data |>
  filter(!row_number() %in% county_indices)
class(non_county_data) <- c("state", class(non_county_data))

add_division_info <- add_division(non_county_data)

#It returns a list of two tibbles. 
#The first is called "County Data" and corresponds to the county data with the added state. 
# The second is called "Non-County Data" and corresponds to the non-county data with the added divsion.
return(list("County Data" = add_state_info, "Non-County Data" = add_division_info))

}
```

## Wrapper Function
This creates the wrapper function called wrapper_function that has the default values argument of "Enrollment" and passes this argument to the education_data function. It calls each function in order and returns a list with the two tibbles.
```{r}
wrapper_function <- function(url, values = "Enrollment"){
  result <- read_csv(url) |>
    education_data(values) |>
    year_function() |>
    new_tibbles()
}
```

## Call the functions.
Call the function for the A dataset and name it edu_a. Then print out the list of two tibbles for A.
Call the function for the B dataset and name it edu_b. Then print out the list of two tibbles for B.
```{r, message = FALSE}
edu_a <- wrapper_function("https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv")
edu_a

edu_b <- wrapper_function("https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv")
edu_b
```

## Combining Tibbles function 
This short function takes in the results of two calls of the wrapper function and combines the tibbles into the County Data and Non-County Data tibbles. It returns a list of the same type, tho this time with the combined tibbles as the two list elements. The function is then called for the 2 output objects from the wrapper_function above.
```{r}
# This function takes in two lists output from the wrapper_function and combines the County Data from both lists, combining the Non-County Data from both lists, and returns a list of those. 
combine_both <- function(first_list, second_list){
  combined_county <- dplyr::bind_rows(first_list[[1]], second_list[[1]])
  combined_non_county <- dplyr::bind_rows(first_list[[2]], second_list[[2]])
  
  return(list("County Data" = combined_county, "Non-County Data" = combined_non_county))
}

#Call the function for the output objects from our wrapper_function
combined_lists <- combine_both(edu_a,edu_b)
```

## plot.state function
This function plots the mean values of enrollment by year for each Division, after removing the Divisions with Error values. First, the function filters to remove the Division of "Error". Then, it groups the tibble's summary statistics by Division and Year_Date. Finally, it gets the mean of each divisionand year and then plots them with the x axis representing the year and the y axis representing the Mean Enrollment.
```{r}
plot.state <- function(df, values = "Enrollment"){
  G <- ggplot(df |> 
    #remove the "ERROR" Division values
    filter(Division != "Error") |>
    #Use get function to reference the variable in your call to mean(): mean(get(values))
    group_by(Division, Year_Date) |>
    summarize("mean_data" = mean(get(values))),
  aes(x = Year_Date, y = mean_data, color = Division, linetype = Division))
#create a line plot with ggplot with appropriate aes() assignments
G + geom_line() + labs(x = "Year", y = paste("Mean", values), title = paste("Mean",values, "by Division over Time"))
}

<<<<<<< HEAD
# Test running the code (to be deleted later)
plot(edu_a$`Non-County Data`)
=======
>>>>>>> 7c9f5c5e816049f5a9f4ed8644bd727d0bc73bdb
```

## plot.county Function
This function will take in a tibble/dataframe, along with a specific state (specified with a 2-character string), a choice of whether we want the areas with the highest enrollment or lowest, and how many of these areas we want to see. From there it will subset the data by specified state, determine the average enrollment for that area from 1987 to 1996. Plots _____ 
```{r}
plot.county <- function(df, values = "Enrollment", input_state = "NC", choice = "top", num_obs = 5){
  if (choice == "top"){
    df |>
      # Filter the data to only include observations from the state specified
      filter(State == input_state) |>
      # Find the mean enrollment for each Area_name and sort these values in descending order
      group_by(area_name) |>
      summarize("mean_enrollment" = mean(get(values))) |>
      arrange(desc(mean_enrollment)) |>
      # Obtain the top/bottom x number of area_name's depending on num_obs input 
      head(n = num_obs)
  } else if (choice == "bottom") {
    df |>
    # Filter the data to only include observations from the state specified
    filter(State == input_state) |>
    # Find the mean enrollment for each Area_name and sort these values in ascensing order
    group_by(area_name) |>
    summarize("mean_enrollment" = mean(get(values))) |>
    arrange(mean_enrollment) |>
    # Obtain the top/bottom x number of area_name's depending on num_obs input 
    head(n = num_obs)
  } else {
    paste("Error - choice input was not either 'top' or 'bottom'")
  }
}
# Test running the code (to be deleted later)
plot(edu_a$`County Data`, input_state = "PA", choice = "top", num_obs = 10)
```
<<<<<<< HEAD
Right now the function only outputs the tibble that we will use to graph. Asked clarifying question in Moodle forum about what exactly the plot should look like
=======

# Put It Together
```{r, message = FALSE}
#Run data processing function on two given URLs. Used default for Enrollment column name.
edu_a <- wrapper_function("https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv")

edu_b <- wrapper_function("https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv")

#Run combining function to put into a list with two data frames.
combo_list <- combine_both(edu_a, edu_b)

#Plot function on state dataframe.
plot.state(combo_list[[2]])

#Insert county stuff here.


#Read in similar datasets using data processing function.
pst_a <- wrapper_function("https://www4.stat.ncsu.edu/~online/datasets/PST01a.csv", values = "Population")

pst_b <- wrapper_function("https://www4.stat.ncsu.edu/~online/datasets/PST01b.csv", values = "Population")

pst_c <- wrapper_function("https://www4.stat.ncsu.edu/~online/datasets/PST01c.csv", values = "Population")

pst_d <- wrapper_function("https://www4.stat.ncsu.edu/~online/datasets/PST01d.csv", values = "Population")


#Run data combining function three times to put into one object.
a_and_b <- combine_both(pst_a, pst_b)

a_b_c<- combine_both(a_and_b, pst_c)

all_combo <- combine_both(a_b_c, pst_d)

#Plot state data frame
plot.state(all_combo[[2]], values = "Population")

#Insert county stuff.

```



>>>>>>> 7c9f5c5e816049f5a9f4ed8644bd727d0bc73bdb
